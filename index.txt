package com.parse.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ParseExcel {
	public static void main(String[] args) {
		String path = "D:/1/UAinfoWebsite/url.xlsx";// 不能包含中文名
		// String path = "D:/3.xls";
		try {
			if (path.endsWith(".xlsx")) {
				new ParseExcel().parseXlsx(new FileInputStream(new File(path)));// 依赖dom4j
			} else {
				new ParseExcel().parseXls(new FileInputStream(new File(path)));
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * XSSFWorkbook解析xlsx
	 * 
	 * @param is
	 */
	public void parseXlsx(InputStream is) {
		XSSFWorkbook wb;
		try {
			wb = new XSSFWorkbook(is);
			XSSFSheet sheet = wb.getSheetAt(0);
			for (int rowNum = 1; rowNum <= sheet.getLastRowNum(); rowNum++) {
				XSSFRow row = sheet.getRow(rowNum);
				if (row != null) {
					// 循环列Cell
					for (int i = 0; i < row.getLastCellNum(); i++) {
						System.out.println(getValue(row.getCell(i)) + " ");
					}
					System.out.println();
				}
			}
		} catch (Exception exception) {

		}
	}

	/**
	 * HSSFWorkbook解析 xls
	 * 
	 * @param is
	 */
	public void parseXls(InputStream is) {
		HSSFWorkbook hssfWorkbook;
		try {
			hssfWorkbook = new HSSFWorkbook(is);
			HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);
			System.out.println(hssfSheet.getSheetName());
			System.out.println("hssfSheet.getLastRowNum():" + hssfSheet.getLastRowNum());// 获取最大行数
			for (int rowNum = 0; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
				HSSFRow hssfRow = hssfSheet.getRow(rowNum);
				if (hssfRow != null) {
					System.out.print(rowNum);
					// 循环列Cell
					for (int i = 0; i < hssfRow.getLastCellNum(); i++) {
						System.out.print(getValue(hssfRow.getCell(i)) + " ");
					}
				}
				System.out.println();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private String getValue(XSSFCell cell) {
		if (cell != null) {
			if (cell.getCellType() == cell.CELL_TYPE_BOOLEAN) {// boolean类型
				return String.valueOf(cell.getBooleanCellValue());
			} else if (cell.getCellType() == cell.CELL_TYPE_NUMERIC) {
				DecimalFormat df = new DecimalFormat("#");// 转换成整型
				return df.format(cell.getNumericCellValue());
				// return String.valueOf(hssfCell.getNumericCellValue());
			} else {
				return String.valueOf(cell.getStringCellValue());
			}
		} else {
			return "";// 未考虑的为空
		}
	}

	/**
	 * 获取Excle表中cell的内容
	 * 
	 * @param hssfCell
	 * @return
	 */
	@SuppressWarnings("static-access")
	private static String getValue(HSSFCell hssfCell) {
		if (hssfCell != null) {
			if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
				return String.valueOf(hssfCell.getBooleanCellValue());
			} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
				DecimalFormat df = new DecimalFormat("#");// 转换成整型
				return df.format(hssfCell.getNumericCellValue());
				// return String.valueOf(hssfCell.getNumericCellValue());
			} else {
				return String.valueOf(hssfCell.getStringCellValue());
			}
		} else {
			return "";
		}
	}
}
